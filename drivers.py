'''Drivers module for resistivity measurements'''


import threading
import visa as v


RESOURCE_MANAGER = v.ResourceManager()


class AbstractVISADriver(object):
    """Abstract VISA Device Driver

    visalib: 'ni' or 'ks' (national instruments/keysight)
    """

    def __init__(self, InstrumentAddress, visalib='ni', **kwargs):
        super(AbstractVISADriver, self).__init__(**kwargs)

        self._comLock = threading.Lock()
        resource_manager = RESOURCE_MANAGER
        self._visa_resource = resource_manager.open_resource(InstrumentAddress)

    def res_close(self):
        self._visa_resource.close()

    def write(self, command, f=False):
        """
            low-level communication wrapper for visa.write with Communication Lock,
            to prevent multiple writes to serial adapter
        """
        if not f:
            with self._comLock:
                self._visa_resource.write(command)
        else:
            self._visa_resource.write(command)

    def query(self, command):
        """Sends commands as strings to the device and receives strings from the device

        low-level communication wrapper for visa.query with Communication Lock,
        to prevent multiple writes to serial adapter
        """
        with self._comLock:
            answer = self._visa_resource.query(command)
        return answer

    def read(self):
        with self._comLock:
            answer = self._visa_resource.read()
        return answer


class AbstractGPIBDeviceDriver(AbstractVISADriver):
    """docstring for Instrument_GPIB"""

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    def query(self, command):
        """Sends commands as strings to the device and receives strings from the device

        :param command: string generated by a given function, whom will be sent to the device
        :type command: str

        :return: answer from the device
        """
        return super().query(command).strip().split(',')


class DSP7265(AbstractGPIBDeviceDriver):
    """docstring for DSP7265"""

    SENSITIVITIES = [
        0.0, 2.0e-9, 5.0e-9, 10.0e-9, 20.0e-9, 50.0e-9, 100.0e-9,
        200.0e-9, 500.0e-9, 1.0e-6, 2.0e-6, 5.0e-6, 10.0e-6,
        20.0e-6, 50.0e-6, 100.0e-6, 200.0e-6, 500.0e-6, 1.0e-3,
        2.0e-3, 5.0e-3, 10.0e-3, 20.0e-3, 50.0e-3, 100.0e-3,
        200.0e-3, 500.0e-3, 1.0
    ]

    TIME_CONSTANTS = [
        10.0e-6, 20.0e-6, 40.0e-6, 80.0e-6, 160.0e-6, 320.0e-6,
        640.0e-6, 5.0e-3, 10.0e-3, 20.0e-3, 50.0e-3, 100.0e-3,
        200.0e-3, 500.0e-3, 1.0, 2.0, 5.0, 10.0, 20.0, 50.0,
        100.0, 200.0, 500.0, 1.0e3, 2.0e3, 5.0e3, 10.0e3,
        20.0e3, 50.0e3
    ]

    def __init__(self, **kwargs):
        super(DSP7265, self).__init__(**kwargs)

    @property
    def output_amplitude(self):
        self._voltage = float(self.query('OA.')[0])
        return self._voltage

    @output_amplitude.setter
    def output_amplitude(self, value):
        self.write(f'OA. {value}')

    @property
    def output_frequency(self):
        self._output_frequency = float(self.query('OF.')[0])
        return self._output_frequency

    @output_frequency.setter
    def output_frequency(self, value):
        self.write(f'OF. {value}')

    @property
    def time_constant(self):
        self._time_constant = float(self.query('TC.')[0])
        return self._time_constant

    @time_constant.setter
    def time_constant(self, value):
        if value not in self.TIME_CONSTANTS:
            raise AssertionError(
                'The time constant may only be one of the specified values!')
        self.write('TC {}'.format(self.TIME_CONSTANTS.index(value)))

    @property
    def sensitivity(self):
        self._sensitivity = float(self.query('SEN.')[0])
        return self._sensitivity

    @sensitivity.setter
    def sensitivity(self, value):
        if value not in self.SENSITIVITIES:
            raise AssertionError(
                'The sensitivity may only be one of the specified values!')
        self.write('SEN {}'.format(self.SENSITIVITIES.index(value)))

    @property
    def mag1(self):
        self._mag1 = float(self.query('MAG1.')[0])
        return self._mag1

    @property
    def mag2(self):
        self._mag2 = self.query('MAG2.')[0]
        return self._mag2
